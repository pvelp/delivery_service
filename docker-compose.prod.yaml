version: '3.8'

services:
  web:
    image: "delivery_service:dep_back"
    build: .
    tty: true
    command: sh -c "cd ./backend && gunicorn --config gunicorn_config.py config.wsgi && gunicorn config.wsgi --bind 0.0.0.0:8000 --timeout 180"
    volumes:
      - static_volume:/home/app/web/staticfiles
      - media_volume:/home/app/web/mediafiles
        #     - nginx_volume:/etc/nginx/certs:ro
 #     - /var/certbot/conf:/etc/letsencrypt/:ro
    expose:
      - 8000
    restart: on-failure
#    env_file:
#      - ./.env
    depends_on:
      db:
        condition: service_healthy

  db:
    image: postgres:15
    restart: unless-stopped
    environment:
      - POSTGRES_DB=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=secretkey
      - POSTGRES_HOST_AUTH_METHOD=trust
    volumes:
      - pg_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  nginx:
    build: ./nginx
    volumes:
      - static_volume:/home/app/web/staticfiles
      - media_volume:/home/app/web/mediafiles
        #      - nginx_volume:/etc/nginx/certs
    ports:
      - "1337:80"
      - "443:443"
    depends_on:
      - web

  redis:
    image: redis
    ports:
      - "6379:6379"

  celery:
    build: .
    tty: true
    command: celery -A backend.config worker -l INFO
    environment:
      - PYTHONPATH=./backend
    depends_on:
      - redis
      - web

#  certbot:
#    image: certbot/certbot:latest
#    volumes:
#      - /var/certbot/conf:/etc/letsencrypt/:rw
#      - /var/certbot/www/:/var/www/certbot/:rw
#    depends_on:
#      - nginx

volumes:
  pg_data:
  static_volume:
  media_volume:
    #  nginx_volume:
